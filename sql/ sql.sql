 @C:\seed2018.sql

SELECT OWNER, CONSTRAINT_NAME, TABLE_NAME
FROM USER_CONSTRAINTS
WHERE TABLE_NAME = 'FILM' OR TABLE_NAME = 'FILM_CATEGORY' OR TABLE_NAME = 'CATEGORY' OR TABLE_NAME ='FILM_ACTOR' OR TABLE_NAME = 'LANGUAGE' OR TABLE_NAME ='ACTOR';

ALTER TABLE ACTOR
ADD CONSTRAINT PK_ACTORID PRIMARY KEY (actor_id);

ALTER TABLE CATEGORY
ADD CONSTRAINT PK_CATEGORYID PRIMARY KEY (category_id);

ALTER TABLE FILM
ADD CONSTRAINT CK_TITLE
CHECK(TITLE IS NOT NULL);

ALTER TABLE ACTOR
ADD CONSTRAINT CK_FNAME
CHECK(first_name IS NOT NULL);

ALTER TABLE ACTOR
ADD CONSTRAINT CK_LNAME
CHECK(last_name IS NOT NULL);

ALTER TABLE CATEGORY
ADD CONSTRAINT CK_CATNAME
CHECK (NAME IS NOT NULL);

ALTER TABLE FILM
ADD CONSTRAINT CK_RENTALRATE
CHECK(RENTAL_RATE IS NOT NULL);

ALTER TABLE FILM
ADD CONSTRAINT CK_RATING
CHECK(RATING IN ('G','PG','PG-13','R','NC-17'));

ALTER TABLE FILM
ADD CONSTRAINT CK_SPLFEATURES
CHECK(SPECIAL_FEATURES IN (NULL,'TRAILERS','COMMENTARIES','DELETED SCENES','BEHIND THE SCENES'));

ALTER TABLE FILM
ADD CONSTRAINT FK_LANGUAGEID   
FOREIGN KEY(language_id)
REFERENCES LANGUAGE(language_id);

ALTER TABLE FILM
ADD CONSTRAINT FK_ORLANGUAGEID
FOREIGN KEY(original_language_id)
REFERENCES LANGUAGE (language_id);
ALTER TABLE FILM_ACTOR
ADD CONSTRAINT FK_ACTORID
FOREIGN KEY (actor_id)
REFERENCES ACTOR (actor_id);
	
ALTER TABLE FILM
ADD CONSTRAINT CK_RELEASEYR
CHECK(RELEASE_YEAR<='2018');

CREATE SEQUENCE "FILM_ID_SEQ"
INCREMENT BY 2 START WITH 22000;

CREATE OR REPLACE TRIGGER "BI_FILM_ID"
BEFORE INSERT ON "FILM"
FOR EACH ROW
BEGIN
SELECT "FILM_ID_SEQ".NEXTVAL INTO :NEW.FILM_ID FROM DUAL;
 END;
  /

 CREATE OR REPLACE TRIGGER BI_FILM_LANG
BEFORE INSERT ON FILM
FOR EACH ROW
DECLARE
 original_language varchar2(200);
    new_language varchar2(200);
  
    original_release varchar2(1000);
    new_release varchar2(100);
 
  new_release_stop varchar2(1000);

   full_new_section varchar2(1000);
 
  full_new varchar2(1000);
 
   BEGIN
   IF (:new.original_language_id IS NOT NULL AND :new.language_id IS NOT NULL) THEN
 
    SELECT name INTO original_language FROM language WHERE language_id = :NEW.original_language_id;
    SELECT name INTO new_language FROM language WHERE language_id = :NEW.language_id;

     SELECT CONCAT('Originally in ', original_language) INTO original_release FROM DUAL;
     SELECT CONCAT('. Re-released in ', new_language) INTO new_release FROM DUAL;

      SELECT CONCAT(new_release, '.') INTO new_release_stop FROM DUAL;

      SELECT CONCAT(original_release, new_release_stop) INTO full_new_section FROM DUAL;
      SELECT CONCAT(:new.description, full_new_section) INTO full_new FROM DUAL;
 
     SELECT full_new INTO :new.DESCRIPTION FROM DUAL;
    END IF;
 END;
   /

 SHOW ERRORS;



 SELECT CATEGORY.NAME, FILM.TITLE, FILM.LENGTH AS LONGEST_DURATION
    FROM FILM, CATEGORY, FILM_CATEGORY
    WHERE FILM.FILM_ID = FILM_CATEGORY.FILM_ID AND FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID AND CATEGORY.NAME = 'Comedy' AND FILM.LENGTH >=ALL(
    SELECT MAX(FILM.LENGTH) FROM FILM);
 CREATE OR REPLACE VIEW MAX_COMEDY_ACTORS AS
 SELECT DISTINCT ACTOR.ACTOR_ID, ACTOR.FIRST_NAME, ACTOR.LAST_NAME
 FROM FILM,  ACTOR,  FILM_ACTOR
 WHERE  FILM_ACTOR.ACTOR_ID = ACTOR.ACTOR_ID AND FILM.FILM_ID = FILM_ACTOR.FILM_ID AND FILM.FILM_ID IN (
SELECT FILM.FILM_ID
FROM FILM, FILM_CATEGORY,CATEGORY
WHERE FILM.FILM_ID = FILM_CATEGORY.FILM_ID AND FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID AND CATEGORY.NAME ='Comedy' AND FILM.LENGTH = (SELECT MAX (FILM.LENGTH) FROM FILM));

CREATE OR REPLACE VIEW MAX_COMEDY_ACTORS AS
 SELECT DISTINCT ACTOR.ACTOR_ID, ACTOR.FIRST_NAME, ACTOR.LAST_NAME
 FROM FILM,  ACTOR,  FILM_ACTOR
 WHERE  FILM_ACTOR.ACTOR_ID = ACTOR.ACTOR_ID AND FILM.FILM_ID = FILM_ACTOR.FILM_ID AND FILM.FILM_ID IN (
SELECT FILM.FILM_ID
FROM FILM, FILM_CATEGORY,CATEGORY
WHERE FILM.FILM_ID = FILM_CATEGORY.FILM_ID AND FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID AND CATEGORY.NAME ='Comedy' AND FILM.LENGTH = (SELECT MAX (FILM.LENGTH) FROM FILM));

 CREATE VIEW V_COMEDY_ACTORS_2008 AS
    SELECT DISTINCT ACTOR.ACTOR_ID, ACTOR.FIRST_NAME, ACTOR.LAST_NAME, CATEGORY.NAME, FILM.RELEASE_YEAR
    FROM FILM, ACTOR, CATEGORY, FILM_CATEGORY, FILM_ACTOR
    WHERE FILM.FILM_ID = FILM_CATEGORY.FILM_ID AND FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID AND FILM_ACTOR.ACTOR_ID = ACTOR.ACTOR_ID AND FILM_ACTOR.FILM_ID = FILM.FILM_ID AND CATEGORY.NAME = 'Comedy' AND FILM.RELEASE_YEAR = '2008';

 CREATE MATERIALIZED VIEW MV_COMEDY_ACTORS_2008
      BUILD IMMEDIATE
    AS
    SELECT DISTINCT ACTOR.ACTOR_ID, ACTOR.FIRST_NAME, ACTOR.LAST_NAME, CATEGORY.NAME, FILM.RELEASE_YEAR
    FROM FILM, ACTOR, CATEGORY, FILM_CATEGORY, FILM_ACTOR
     WHERE FILM.FILM_ID = FILM_CATEGORY.FILM_ID AND FILM_CATEGORY.CATEGORY_ID = CATEGORY.CATEGORY_ID 
AND FILM_ACTOR.ACTOR_ID = ACTOR.ACTOR_ID AND FILM_ACTOR.FILM_ID = FILM.FILM_ID AND CATEGORY.NAME = 'Comedy' 
AND FILM.RELEASE_YEAR = '2008';

 SELECT * FROM V_COMEDY_ACTORS_2008;

 SELECT * FROM MV_COMEDY_ACTORS_2008;

SET TIME ON;
SELECT *
    FROM (SELECT TITLE FROM FILM
    WHERE INSTR(SUBSTR(film.description, INSTR(film.description,'in')),'Boat')>0
ORDER BY TITLE ASC)
WHERE ROWNUM <=200;

CREATE INDEX  IDX_SEARCH_LOCATION ON FILM(INSTR(SUBSTR(description,INSTR(description,'in')),'Boat'));


 EXPLAIN PLAN FOR SELECT /*+RULE*/ * FROM FILM WHERE FILM.FILM_ID >1000;
 SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

 EXPLAIN PLAN FOR SELECT/*+COST*/* FROM FILM WHERE FILM.FILM_ID >1000;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

 SELECT * FROM FILM
  WHERE FILM.FILM_ID = '1000';

 EXPLAIN PLAN FOR SELECT/*+COST*/* FROM FILM WHERE FILM.FILM_ID =1000;
SELECT PLAN_TABLE_OUTPUT FROM TABLE (DBMS_XPLAN.DISPLAY);

 ANALYZE INDEX PK_FILMID VALIDATE STRUCTURE;

 SELECT HEIGHT FROM INDEX_STATS;

 SELECT  LF_BLKS FROM INDEX_STATS;

 SELECT TABLE_NAME, BLOCKS
    FROM  USER_TABLES
    WHERE TABLE_NAME ='FILM';

